{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nexport const createBlog = (blog, token = \"text\") => {\n  return fetch(`${API}/blog`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["D:/project/git-walk/Walkover/frontend/actions/blog.js"],"names":["fetch","API","createBlog","blog","token","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","list","username","listBlogsEndpoint","removeBlog","deleteBlogEndpoint","isAuth","role","handleResponse","updateBlog","updateBlogEndpoint"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\r\nimport { API } from '../config';\r\n\r\nexport const createBlog = (blog, token = \"text\") => {\r\n    return fetch(`${API}/blog`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\r\n    const data = {\r\n        limit,\r\n        skip\r\n    };\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const singleBlog = slug => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const list = username => {\r\n    let listBlogsEndpoint;\r\n\r\n    if (username) {\r\n        listBlogsEndpoint = `${API}/${username}/blogs`;\r\n    } else {\r\n        listBlogsEndpoint = `${API}/blogs`;\r\n    }\r\n\r\n    return fetch(`${listBlogsEndpoint}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const removeBlog = (slug, token) => {\r\n    let deleteBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        deleteBlogEndpoint = `${API}/blog/${slug}`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        deleteBlogEndpoint = `${API}/user/blog/${slug}`;\r\n    }\r\n\r\n    return fetch(`${deleteBlogEndpoint}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n        .then(response => {\r\n            handleResponse(response);\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const updateBlog = (blog, token, slug) => {\r\n    let updateBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        updateBlogEndpoint = `${API}/blog/${slug}`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\r\n    }\r\n\r\n    return fetch(`${updateBlogEndpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            handleResponse(response);\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}